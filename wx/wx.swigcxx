%module(directors="1") wx

%{
#include <wx/platform.h>
#include <wx/app.h>
#include "wxwrap.h"
#include <wx/string.h>
#include <wx/menu.h>
#include <wx/dlimpexp.h>
#include <wx/msgdlg.h>
#include <wx/version.h>
#include <wx/utils.h>
#include <wx/defs.h>
#include <wx/treectrl.h>
#include <wx/log.h>
#include <wx/textctrl.h>
#include <wx/scrolwin.h>
#include <wx/dc.h>
#include <wx/dcclient.h>
%}

%include <wx/dlimpexp.h>
%include <wx/version.h>


%naturalvar wxString;

class wxString;

%typemap(gotype) string, const wxString & "string"
%typemap(gotype) string, wxString "string"

%typemap(in) wxString
%{ $1.assign(%input.p, $input.n); %}

%typemap(directorout) wxString
%{ $result.assign($input.p, $input.n); %}

/* Convert from wxString to go string */
%typemap(out) wxString { 
   $result = _swig_makegostring($1.data(), $1.length());
}

%typemap(directorin) wxString
%{ $input = _swig_makegostring($1_name.data(), $1_name.length()); %}

%typemap(in) const wxString &
%{
  wxString $1_str($input.p, $input.n);
  $1 = &$1_str;
%}

%typemap(directorout,warning=SWIGWARN_TYPEMAP_THREAD_UNSAFE_MSG) const wxString &
%{
  static wxString $1_str;
  $1_str.assign($input.p, $input.n);
  $result = &$1_str;
%}

%typemap(out) const wxString &
%{ $result = _swig_makegostring((*$1).data(), (*$1).length()); %}

%typemap(directorin) const wxString &
%{ $input = _swig_makegostring($1_name.data(), $1_name.length()); %}


class wxObject
{
};

/*  Standard menu IDs */
enum
{
    /* no id matches this one when compared to it */
    wxID_NONE = -3,

    /*  id for a separator line in the menu (invalid for normal item) */
    wxID_SEPARATOR = -2,

    /* any id: means that we don't care about the id, whether when installing
     * an event handler or when creating a new window */
    wxID_ANY = -1,


    /* all predefined ids are between wxID_LOWEST and wxID_HIGHEST */
    wxID_LOWEST = 4999,

    wxID_OPEN,
    wxID_CLOSE,
    wxID_NEW,
    wxID_SAVE,
    wxID_SAVEAS,
    wxID_REVERT,
    wxID_EXIT,
    wxID_UNDO,
    wxID_REDO,
    wxID_HELP,
    wxID_PRINT,
    wxID_PRINT_SETUP,
    wxID_PAGE_SETUP,
    wxID_PREVIEW,
    wxID_ABOUT,
    wxID_HELP_CONTENTS,
    wxID_HELP_INDEX,
    wxID_HELP_SEARCH,
    wxID_HELP_COMMANDS,
    wxID_HELP_PROCEDURES,
    wxID_HELP_CONTEXT,
    wxID_CLOSE_ALL,
    wxID_PREFERENCES,

    wxID_EDIT = 5030,
    wxID_CUT,
    wxID_COPY,
    wxID_PASTE,
    wxID_CLEAR,
    wxID_FIND,
    wxID_DUPLICATE,
    wxID_SELECTALL,
    wxID_DELETE,
    wxID_REPLACE,
    wxID_REPLACE_ALL,
    wxID_PROPERTIES,

    wxID_VIEW_DETAILS,
    wxID_VIEW_LARGEICONS,
    wxID_VIEW_SMALLICONS,
    wxID_VIEW_LIST,
    wxID_VIEW_SORTDATE,
    wxID_VIEW_SORTNAME,
    wxID_VIEW_SORTSIZE,
    wxID_VIEW_SORTTYPE,

    wxID_FILE = 5050,
    wxID_FILE1,
    wxID_FILE2,
    wxID_FILE3,
    wxID_FILE4,
    wxID_FILE5,
    wxID_FILE6,
    wxID_FILE7,
    wxID_FILE8,
    wxID_FILE9,

    /*  Standard button and menu IDs */
    wxID_OK = 5100,
    wxID_CANCEL,
    wxID_APPLY,
    wxID_YES,
    wxID_NO,
    wxID_STATIC,
    wxID_FORWARD,
    wxID_BACKWARD,
    wxID_DEFAULT,
    wxID_MORE,
    wxID_SETUP,
    wxID_RESET,
    wxID_CONTEXT_HELP,
    wxID_YESTOALL,
    wxID_NOTOALL,
    wxID_ABORT,
    wxID_RETRY,
    wxID_IGNORE,
    wxID_ADD,
    wxID_REMOVE,

    wxID_UP,
    wxID_DOWN,
    wxID_HOME,
    wxID_REFRESH,
    wxID_STOP,
    wxID_INDEX,

    wxID_BOLD,
    wxID_ITALIC,
    wxID_JUSTIFY_CENTER,
    wxID_JUSTIFY_FILL,
    wxID_JUSTIFY_RIGHT,
    wxID_JUSTIFY_LEFT,
    wxID_UNDERLINE,
    wxID_INDENT,
    wxID_UNINDENT,
    wxID_ZOOM_100,
    wxID_ZOOM_FIT,
    wxID_ZOOM_IN,
    wxID_ZOOM_OUT,
    wxID_UNDELETE,
    wxID_REVERT_TO_SAVED,

    /*  System menu IDs (used by wxUniv): */
    wxID_SYSTEM_MENU = 5200,
    wxID_CLOSE_FRAME,
    wxID_MOVE_FRAME,
    wxID_RESIZE_FRAME,
    wxID_MAXIMIZE_FRAME,
    wxID_ICONIZE_FRAME,
    wxID_RESTORE_FRAME,

    /*  IDs used by generic file dialog (13 consecutive starting from this value) */
    wxID_FILEDLGG = 5900,

    wxID_HIGHEST = 5999
};

// from defs.h
#define wxYES                   0x00000002
#define wxOK                    0x00000004
#define wxNO                    0x00000008
#define wxYES_NO                (wxYES | wxNO)
#define wxCANCEL                0x00000010

#define wxYES_DEFAULT           0x00000000  /*  has no effect (default) */
#define wxNO_DEFAULT            0x00000080


#define wxICON_EXCLAMATION      0x00000100
#define wxICON_HAND             0x00000200
#define wxICON_WARNING          wxICON_EXCLAMATION
#define wxICON_ERROR            wxICON_HAND
#define wxICON_QUESTION         0x00000400
#define wxICON_INFORMATION      0x00000800
#define wxICON_STOP             wxICON_HAND
#define wxICON_ASTERISK         wxICON_INFORMATION
#define wxICON_MASK             (0x00000100|0x00000200|0x00000400|0x00000800)


// Get OS description as a user-readable string
WXDLLIMPEXP_BASE wxString wxGetOsDescription();

class wxApp
{
public:
    void SetExitOnFrameDelete(bool flag)
        { m_exitOnFrameDelete = flag ? Yes : No; }
    bool GetExitOnFrameDelete() const
        { return m_exitOnFrameDelete == Yes; }
};

typedef int wxEventType;

#if WXWIN_COMPATIBILITY_EVENT_TYPES

#define DECLARE_EVENT_TABLE_ENTRY(type, winid, idLast, fn, obj) \
    { type, winid, idLast, fn, obj }

#define BEGIN_DECLARE_EVENT_TYPES() enum {
#define END_DECLARE_EVENT_TYPES() };
#define DECLARE_EVENT_TYPE(name, value) name = wxEVT_FIRST + value,
#define DECLARE_LOCAL_EVENT_TYPE(name, value) name = wxEVT_USER_FIRST + value,
#define DECLARE_EXPORTED_EVENT_TYPE(expdecl, name, value) \
    DECLARE_LOCAL_EVENT_TYPE(name, value)
#define DEFINE_EVENT_TYPE(name)
#define DEFINE_LOCAL_EVENT_TYPE(name)

#else // !WXWIN_COMPATIBILITY_EVENT_TYPES

#define DECLARE_EVENT_TABLE_ENTRY(type, winid, idLast, fn, obj) \
    wxEventTableEntry(type, winid, idLast, fn, obj)

#define BEGIN_DECLARE_EVENT_TYPES()
#define END_DECLARE_EVENT_TYPES()
#define DECLARE_EXPORTED_EVENT_TYPE(expdecl, name, value) \
    extern expdecl const wxEventType name;
#define DECLARE_EVENT_TYPE(name, value) \
    DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_CORE, name, value)
#define DECLARE_LOCAL_EVENT_TYPE(name, value) \
    DECLARE_EXPORTED_EVENT_TYPE(wxEMPTY_PARAMETER_VALUE, name, value)
#define DEFINE_EVENT_TYPE(name) const wxEventType name = wxNewEventType();
#define DEFINE_LOCAL_EVENT_TYPE(name) DEFINE_EVENT_TYPE(name)

// generate a new unique event type
extern WXDLLIMPEXP_BASE wxEventType wxNewEventType();

#endif // WXWIN_COMPATIBILITY_EVENT_TYPES/!WXWIN_COMPATIBILITY_EVENT_TYPES


BEGIN_DECLARE_EVENT_TYPES()

#if WXWIN_COMPATIBILITY_EVENT_TYPES
    wxEVT_NULL = 0,
    wxEVT_FIRST = 10000,
    wxEVT_USER_FIRST = wxEVT_FIRST + 2000,
#else // !WXWIN_COMPATIBILITY_EVENT_TYPES
    // it is important to still have these as constants to avoid
    // initialization order related problems
    DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_BASE, wxEVT_NULL, 0)
    DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_BASE, wxEVT_FIRST, 10000)
    DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_BASE, wxEVT_USER_FIRST, wxEVT_FIRST + 2000)
#endif // WXWIN_COMPATIBILITY_EVENT_TYPES/!WXWIN_COMPATIBILITY_EVENT_TYPES

    DECLARE_EVENT_TYPE(wxEVT_COMMAND_BUTTON_CLICKED, 1)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_CHECKBOX_CLICKED, 2)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_CHOICE_SELECTED, 3)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_LISTBOX_SELECTED, 4)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_LISTBOX_DOUBLECLICKED, 5)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_CHECKLISTBOX_TOGGLED, 6)
    // now they are in wx/textctrl.h
#if WXWIN_COMPATIBILITY_EVENT_TYPES
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TEXT_UPDATED, 7)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TEXT_ENTER, 8)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TEXT_URL, 13)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TEXT_MAXLEN, 14)
#endif // WXWIN_COMPATIBILITY_EVENT_TYPES
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_MENU_SELECTED, 9)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_SLIDER_UPDATED, 10)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_RADIOBOX_SELECTED, 11)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_RADIOBUTTON_SELECTED, 12)

    // wxEVT_COMMAND_SCROLLBAR_UPDATED is now obsolete since we use
    // wxEVT_SCROLL... events

    DECLARE_EVENT_TYPE(wxEVT_COMMAND_SCROLLBAR_UPDATED, 13)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_VLBOX_SELECTED, 14)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_COMBOBOX_SELECTED, 15)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TOOL_RCLICKED, 16)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TOOL_ENTER, 17)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_SPINCTRL_UPDATED, 18)

        // Sockets and timers send events, too
    DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_BASE, wxEVT_SOCKET, 50)
    DECLARE_EVENT_TYPE(wxEVT_TIMER , 80)

        // Mouse event types
    DECLARE_EVENT_TYPE(wxEVT_LEFT_DOWN, 100)
    DECLARE_EVENT_TYPE(wxEVT_LEFT_UP, 101)
    DECLARE_EVENT_TYPE(wxEVT_MIDDLE_DOWN, 102)
    DECLARE_EVENT_TYPE(wxEVT_MIDDLE_UP, 103)
    DECLARE_EVENT_TYPE(wxEVT_RIGHT_DOWN, 104)
    DECLARE_EVENT_TYPE(wxEVT_RIGHT_UP, 105)
    DECLARE_EVENT_TYPE(wxEVT_MOTION, 106)
    DECLARE_EVENT_TYPE(wxEVT_ENTER_WINDOW, 107)
    DECLARE_EVENT_TYPE(wxEVT_LEAVE_WINDOW, 108)
    DECLARE_EVENT_TYPE(wxEVT_LEFT_DCLICK, 109)
    DECLARE_EVENT_TYPE(wxEVT_MIDDLE_DCLICK, 110)
    DECLARE_EVENT_TYPE(wxEVT_RIGHT_DCLICK, 111)
    DECLARE_EVENT_TYPE(wxEVT_SET_FOCUS, 112)
    DECLARE_EVENT_TYPE(wxEVT_KILL_FOCUS, 113)
    DECLARE_EVENT_TYPE(wxEVT_CHILD_FOCUS, 114)
    DECLARE_EVENT_TYPE(wxEVT_MOUSEWHEEL, 115)

        // Non-client mouse events
    DECLARE_EVENT_TYPE(wxEVT_NC_LEFT_DOWN, 200)
    DECLARE_EVENT_TYPE(wxEVT_NC_LEFT_UP, 201)
    DECLARE_EVENT_TYPE(wxEVT_NC_MIDDLE_DOWN, 202)
    DECLARE_EVENT_TYPE(wxEVT_NC_MIDDLE_UP, 203)
    DECLARE_EVENT_TYPE(wxEVT_NC_RIGHT_DOWN, 204)
    DECLARE_EVENT_TYPE(wxEVT_NC_RIGHT_UP, 205)
    DECLARE_EVENT_TYPE(wxEVT_NC_MOTION, 206)
    DECLARE_EVENT_TYPE(wxEVT_NC_ENTER_WINDOW, 207)
    DECLARE_EVENT_TYPE(wxEVT_NC_LEAVE_WINDOW, 208)
    DECLARE_EVENT_TYPE(wxEVT_NC_LEFT_DCLICK, 209)
    DECLARE_EVENT_TYPE(wxEVT_NC_MIDDLE_DCLICK, 210)
    DECLARE_EVENT_TYPE(wxEVT_NC_RIGHT_DCLICK, 211)

        // Character input event type
    DECLARE_EVENT_TYPE(wxEVT_CHAR, 212)
    DECLARE_EVENT_TYPE(wxEVT_CHAR_HOOK, 213)
    DECLARE_EVENT_TYPE(wxEVT_NAVIGATION_KEY, 214)
    DECLARE_EVENT_TYPE(wxEVT_KEY_DOWN, 215)
    DECLARE_EVENT_TYPE(wxEVT_KEY_UP, 216)
#if wxUSE_HOTKEY
    DECLARE_EVENT_TYPE(wxEVT_HOTKEY, 217)
#endif
        // Set cursor event
    DECLARE_EVENT_TYPE(wxEVT_SET_CURSOR, 230)

        // wxScrollBar and wxSlider event identifiers
    DECLARE_EVENT_TYPE(wxEVT_SCROLL_TOP, 300)
    DECLARE_EVENT_TYPE(wxEVT_SCROLL_BOTTOM, 301)
    DECLARE_EVENT_TYPE(wxEVT_SCROLL_LINEUP, 302)
    DECLARE_EVENT_TYPE(wxEVT_SCROLL_LINEDOWN, 303)
    DECLARE_EVENT_TYPE(wxEVT_SCROLL_PAGEUP, 304)
    DECLARE_EVENT_TYPE(wxEVT_SCROLL_PAGEDOWN, 305)
    DECLARE_EVENT_TYPE(wxEVT_SCROLL_THUMBTRACK, 306)
    DECLARE_EVENT_TYPE(wxEVT_SCROLL_THUMBRELEASE, 307)
    DECLARE_EVENT_TYPE(wxEVT_SCROLL_CHANGED, 308)

        // Scroll events from wxWindow
    DECLARE_EVENT_TYPE(wxEVT_SCROLLWIN_TOP, 320)
    DECLARE_EVENT_TYPE(wxEVT_SCROLLWIN_BOTTOM, 321)
    DECLARE_EVENT_TYPE(wxEVT_SCROLLWIN_LINEUP, 322)
    DECLARE_EVENT_TYPE(wxEVT_SCROLLWIN_LINEDOWN, 323)
    DECLARE_EVENT_TYPE(wxEVT_SCROLLWIN_PAGEUP, 324)
    DECLARE_EVENT_TYPE(wxEVT_SCROLLWIN_PAGEDOWN, 325)
    DECLARE_EVENT_TYPE(wxEVT_SCROLLWIN_THUMBTRACK, 326)
    DECLARE_EVENT_TYPE(wxEVT_SCROLLWIN_THUMBRELEASE, 327)

        // System events
    DECLARE_EVENT_TYPE(wxEVT_SIZE, 400)
    DECLARE_EVENT_TYPE(wxEVT_MOVE, 401)
    DECLARE_EVENT_TYPE(wxEVT_CLOSE_WINDOW, 402)
    DECLARE_EVENT_TYPE(wxEVT_END_SESSION, 403)
    DECLARE_EVENT_TYPE(wxEVT_QUERY_END_SESSION, 404)
    DECLARE_EVENT_TYPE(wxEVT_ACTIVATE_APP, 405)
    // 406..408 are power events
    DECLARE_EVENT_TYPE(wxEVT_ACTIVATE, 409)
    DECLARE_EVENT_TYPE(wxEVT_CREATE, 410)
    DECLARE_EVENT_TYPE(wxEVT_DESTROY, 411)
    DECLARE_EVENT_TYPE(wxEVT_SHOW, 412)
    DECLARE_EVENT_TYPE(wxEVT_ICONIZE, 413)
    DECLARE_EVENT_TYPE(wxEVT_MAXIMIZE, 414)
    DECLARE_EVENT_TYPE(wxEVT_MOUSE_CAPTURE_CHANGED, 415)
    DECLARE_EVENT_TYPE(wxEVT_MOUSE_CAPTURE_LOST, 416)
    DECLARE_EVENT_TYPE(wxEVT_PAINT, 417)
    DECLARE_EVENT_TYPE(wxEVT_ERASE_BACKGROUND, 418)
    DECLARE_EVENT_TYPE(wxEVT_NC_PAINT, 419)
    DECLARE_EVENT_TYPE(wxEVT_PAINT_ICON, 420)
    DECLARE_EVENT_TYPE(wxEVT_MENU_OPEN, 421)
    DECLARE_EVENT_TYPE(wxEVT_MENU_CLOSE, 422)
    DECLARE_EVENT_TYPE(wxEVT_MENU_HIGHLIGHT, 423)
    DECLARE_EVENT_TYPE(wxEVT_CONTEXT_MENU, 424)
    DECLARE_EVENT_TYPE(wxEVT_SYS_COLOUR_CHANGED, 425)
    DECLARE_EVENT_TYPE(wxEVT_DISPLAY_CHANGED, 426)
    DECLARE_EVENT_TYPE(wxEVT_SETTING_CHANGED, 427)
    DECLARE_EVENT_TYPE(wxEVT_QUERY_NEW_PALETTE, 428)
    DECLARE_EVENT_TYPE(wxEVT_PALETTE_CHANGED, 429)
    DECLARE_EVENT_TYPE(wxEVT_JOY_BUTTON_DOWN, 430)
    DECLARE_EVENT_TYPE(wxEVT_JOY_BUTTON_UP, 431)
    DECLARE_EVENT_TYPE(wxEVT_JOY_MOVE, 432)
    DECLARE_EVENT_TYPE(wxEVT_JOY_ZMOVE, 433)
    DECLARE_EVENT_TYPE(wxEVT_DROP_FILES, 434)
    DECLARE_EVENT_TYPE(wxEVT_DRAW_ITEM, 435)
    DECLARE_EVENT_TYPE(wxEVT_MEASURE_ITEM, 436)
    DECLARE_EVENT_TYPE(wxEVT_COMPARE_ITEM, 437)
    DECLARE_EVENT_TYPE(wxEVT_INIT_DIALOG, 438)
    DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_BASE, wxEVT_IDLE, 439)
    DECLARE_EVENT_TYPE(wxEVT_UPDATE_UI, 440)
    DECLARE_EVENT_TYPE(wxEVT_SIZING, 441)
    DECLARE_EVENT_TYPE(wxEVT_MOVING, 442)
    DECLARE_EVENT_TYPE(wxEVT_HIBERNATE, 443)
    // more power events follow -- see wx/power.h

        // Clipboard events
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TEXT_COPY, 444)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TEXT_CUT, 445)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TEXT_PASTE, 446)

        // Generic command events
        // Note: a click is a higher-level event than button down/up
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_LEFT_CLICK, 500)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_LEFT_DCLICK, 501)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_RIGHT_CLICK, 502)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_RIGHT_DCLICK, 503)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_SET_FOCUS, 504)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_KILL_FOCUS, 505)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_ENTER, 506)

        DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_BEGIN_DRAG, 600)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_BEGIN_RDRAG, 601)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT, 602)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_END_LABEL_EDIT, 603)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_DELETE_ITEM, 604)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_GET_INFO, 605)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_SET_INFO, 606)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_ITEM_EXPANDED, 607)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_ITEM_EXPANDING, 608)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_ITEM_COLLAPSED, 609)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_ITEM_COLLAPSING, 610)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_SEL_CHANGED, 611)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_SEL_CHANGING, 612)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_KEY_DOWN, 613)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_ITEM_ACTIVATED, 614)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK, 615)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK, 616)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_END_DRAG, 617)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK, 618)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP, 619)
    DECLARE_EVENT_TYPE(wxEVT_COMMAND_TREE_ITEM_MENU, 620)

        // Help events
    DECLARE_EVENT_TYPE(wxEVT_HELP, 1050)
    DECLARE_EVENT_TYPE(wxEVT_DETAILED_HELP, 1051)

END_DECLARE_EVENT_TYPES()


typedef int wxWindowID;

class wxSize
{
public:
    // members are public for compatibility, don't use them directly.
    int x, y;

    // constructors
    wxSize() : x(0), y(0) { }
    wxSize(int xx, int yy) : x(xx), y(yy) { }
};

extern const wxSize wxDefaultSize;

class wxPoint
{
public:
    int x, y;
    wxPoint( const wxPoint& rP );
    wxPoint() : x(0), y(0) { }
    wxPoint(int xx, int yy) : x(xx), y(yy) { }
};

extern const wxPoint wxDefaultPosition;

class wxEvent
{
public:
    wxEvent(int winid = 0, wxEventType commandType = wxEVT_NULL );

    virtual wxEvent* Clone() const = 0;
    wxEventType GetEventType() const { return m_eventType; }
    long GetTimestamp() const { return m_timeStamp; }
    int GetId() const { return m_id; }
    void Skip(bool skip = true);
};

class wxSizeEvent : public wxEvent
{
public:
    wxSizeEvent(const wxSize& sz, int winid = 0)
        : wxEvent(winid, wxEVT_SIZE),
          m_size(sz)
        { }
    wxSize GetSize() const { return m_size; }
    wxRect GetRect() const { return m_rect; }
    void SetRect(const wxRect& rect) { m_rect = rect; }
};

class wxCommandEvent : public wxEvent
{
public:
    wxCommandEvent(wxEventType commandType = wxEVT_NULL, int winid = 0);
    virtual wxEvent* Clone() const;
    // Get listbox selection if single-choice
    int GetSelection() const { return m_commandInt; }
    wxString GetString() const;
};

class wxNotifyEvent : public wxCommandEvent
{
public:
    void Veto();
    void Allow();
};

class wxPaintEvent : public wxEvent
{
public:
};

class wxTreeEvent : public wxNotifyEvent
{
public:
    wxTreeItemId GetItem() const;
    wxPoint GetPoint() const;
    const wxString& GetLabel() const;
    wxString GetToolTip();
};

class wxEvtHandler {
public:
    void Connect(int winid,
                 int lastId,
                 int eventType,
                 wxObjectEventFunction func,
                 wxObject *userData = (wxObject *) NULL,
                 wxEvtHandler *eventSink = (wxEvtHandler *) NULL);
                 
                 
    %extend {
    	    void Connect(int id, int lastId, int eventType, ESink* pSink) {
    	    	    self->Connect(id, lastId, eventType, 
    	    	    (wxObjectEventFunction)&ESink::Thunk,
    	    	    pSink);
    	    }
    }   
	// add an event to be processed later
    void AddPendingEvent(wxEvent& event);
};

class wxWindow : public wxEvtHandler
{
public:
    bool Close(bool force = false);
    void SetSize( int x, int y, int width, int height,
                  int sizeFlags = wxSIZE_AUTO );
    wxSize GetSize() const;

    wxSize GetClientSize() const;
    wxPoint ClientToScreen(const wxPoint& pt) const;
    
    void Refresh();
};

class wxMenu 
{
public:
    wxMenuItem* Append(int itemid,
        const wxString& text = wxEmptyString,
        const wxString& help = wxEmptyString,
        wxItemKind kind = wxITEM_NORMAL);
    wxMenuItem* AppendSeparator();
};

class wxMenuBar {
public:
    wxMenuBar();
    virtual bool Append( wxMenu *menu, const wxString& title );
};

class wxFrame : public wxWindow
{
public:
    wxFrame( wxWindow *parent,
             wxWindowID id,
             const wxString& title );
             
    virtual wxStatusBar* CreateStatusBar(int number = 1,
				 long style = wxST_SIZEGRIP|wxFULL_REPAINT_ON_RESIZE,
				 wxWindowID winid = 0,
				 const wxString& name =
				    wxStatusLineNameStr);

    void Show(bool);
    virtual void SetStatusText(const wxString &text, int number = 0);
    virtual void SetMenuBar(wxMenuBar *menubar);
};

int WXDLLEXPORT wxMessageBox(const wxString& message,
                             const wxString& caption = wxMessageBoxCaptionStr,
                             int style = wxOK | wxCENTRE,
                             wxWindow *parent = NULL,
                             int x = wxDefaultCoord, int y = wxDefaultCoord);

class wxPanel : public wxWindow
{
public:
    // Constructor
    wxPanel(wxWindow *parent,
            wxWindowID winid = wxID_ANY,
            const wxPoint& pos = wxDefaultPosition,
            const wxSize& size = wxDefaultSize,
            long style = wxTAB_TRAVERSAL | wxNO_BORDER,
            const wxString& name = wxPanelNameStr);

};

typedef void *wxTreeItemIdValue;

class WXDLLEXPORT wxTreeItemId
{
public:
    // ctors
        // 0 is invalid value for HTREEITEM
    wxTreeItemId() { m_pItem = 0; }

        // construct wxTreeItemId from the native item id
    wxTreeItemId(void *pItem) { m_pItem = pItem; }

        // default copy ctor/assignment operator are ok for us

    // accessors
        // is this a valid tree item?
    bool IsOk() const { return m_pItem != 0; }
        // return true if this item is not valid

    // operations
        // invalidate the item
    void Unset() { m_pItem = 0; }

#if WXWIN_COMPATIBILITY_2_4
    // deprecated: only for compatibility, don't work on 64 bit archs
    wxTreeItemId(long item) { m_pItem = wxUIntToPtr(item); }
#else // !WXWIN_COMPATIBILITY_2_4
#endif // WXWIN_COMPATIBILITY_2_4/!WXWIN_COMPATIBILITY_2_4

    wxTreeItemIdValue m_pItem;
};

// enum for different images associated with a treectrl item
enum wxTreeItemIcon
{
    wxTreeItemIcon_Normal,              // not selected, not expanded
    wxTreeItemIcon_Selected,            //     selected, not expanded
    wxTreeItemIcon_Expanded,            // not selected,     expanded
    wxTreeItemIcon_SelectedExpanded,    //     selected,     expanded
    wxTreeItemIcon_Max
};

// In c headers these are enums.
// changing then to #defines since
// they work nicer with 'or' after SWIG
// converts them,

/*  this is different from wxBORDER_NONE as by default the controls do have */
/*  border */
#define wxBORDER_DEFAULT 0

#define wxBORDER_NONE   0x00200000
#define wxBORDER_STATIC 0x01000000
#define wxBORDER_SIMPLE 0x02000000
#define wxBORDER_RAISED 0x04000000
#define wxBORDER_SUNKEN 0x08000000
#define wxBORDER_THEME 0x10000000

/*  a mask to extract border style from the combination of flags */
#define wxBORDER_MASK 0x1f200000

// Bitmap flags
enum wxBitmapType
{
    wxBITMAP_TYPE_INVALID,          // should be == 0 for compatibility!
    wxBITMAP_TYPE_BMP,
    wxBITMAP_TYPE_BMP_RESOURCE,
    wxBITMAP_TYPE_RESOURCE = wxBITMAP_TYPE_BMP_RESOURCE,
    wxBITMAP_TYPE_ICO,
    wxBITMAP_TYPE_ICO_RESOURCE,
    wxBITMAP_TYPE_CUR,
    wxBITMAP_TYPE_CUR_RESOURCE,
    wxBITMAP_TYPE_XBM,
    wxBITMAP_TYPE_XBM_DATA,
    wxBITMAP_TYPE_XPM,
    wxBITMAP_TYPE_XPM_DATA,
    wxBITMAP_TYPE_TIF,
    wxBITMAP_TYPE_TIF_RESOURCE,
    wxBITMAP_TYPE_GIF,
    wxBITMAP_TYPE_GIF_RESOURCE,
    wxBITMAP_TYPE_PNG,
    wxBITMAP_TYPE_PNG_RESOURCE,
    wxBITMAP_TYPE_JPEG,
    wxBITMAP_TYPE_JPEG_RESOURCE,
    wxBITMAP_TYPE_PNM,
    wxBITMAP_TYPE_PNM_RESOURCE,
    wxBITMAP_TYPE_PCX,
    wxBITMAP_TYPE_PCX_RESOURCE,
    wxBITMAP_TYPE_PICT,
    wxBITMAP_TYPE_PICT_RESOURCE,
    wxBITMAP_TYPE_ICON,
    wxBITMAP_TYPE_ICON_RESOURCE,
    wxBITMAP_TYPE_ANI,
    wxBITMAP_TYPE_IFF,
    wxBITMAP_TYPE_TGA,
    wxBITMAP_TYPE_MACCURSOR,
    wxBITMAP_TYPE_MACCURSOR_RESOURCE,
    wxBITMAP_TYPE_ANY = 50
};


// ----------------------------------------------------------------------------
// wxTreeCtrl flags
// ----------------------------------------------------------------------------

#define wxTR_NO_BUTTONS              0x0000     // for convenience
#define wxTR_HAS_BUTTONS             0x0001     // draw collapsed/expanded btns
#define wxTR_NO_LINES                0x0004     // don't draw lines at all
#define wxTR_LINES_AT_ROOT           0x0008     // connect top-level nodes
#define wxTR_TWIST_BUTTONS           0x0010     // still used by wxTreeListCtrl

#define wxTR_SINGLE                  0x0000     // for convenience
#define wxTR_MULTIPLE                0x0020     // can select multiple items
#define wxTR_EXTENDED                0x0040     // TODO: allow extended selection
#define wxTR_HAS_VARIABLE_ROW_HEIGHT 0x0080     // what it says

#define wxTR_EDIT_LABELS             0x0200     // can edit item labels
#define wxTR_ROW_LINES               0x0400     // put border around items
#define wxTR_HIDE_ROOT               0x0800     // don't display root node

#define wxTR_FULL_ROW_HIGHLIGHT      0x2000     // highlight full horz space

#ifdef __WXGTK20__
#define wxTR_DEFAULT_STYLE           (wxTR_HAS_BUTTONS | wxTR_NO_LINES)
#else
#define wxTR_DEFAULT_STYLE           (wxTR_HAS_BUTTONS | wxTR_LINES_AT_ROOT)
#endif

#if WXWIN_COMPATIBILITY_2_6
// deprecated, don't use
#define wxTR_MAC_BUTTONS             0
#define wxTR_AQUA_BUTTONS            0
#endif // WXWIN_COMPATIBILITY_2_6


// values for the `flags' parameter of wxTreeCtrl::HitTest() which determine
// where exactly the specified point is situated:

static const int wxTREE_HITTEST_ABOVE            = 0x0001;
static const int wxTREE_HITTEST_BELOW            = 0x0002;
static const int wxTREE_HITTEST_NOWHERE          = 0x0004;
    // on the button associated with an item.
static const int wxTREE_HITTEST_ONITEMBUTTON     = 0x0008;
    // on the bitmap associated with an item.
static const int wxTREE_HITTEST_ONITEMICON       = 0x0010;
    // on the indent associated with an item.
static const int wxTREE_HITTEST_ONITEMINDENT     = 0x0020;
    // on the label (string) associated with an item.
static const int wxTREE_HITTEST_ONITEMLABEL      = 0x0040;
    // on the right of the label associated with an item.
static const int wxTREE_HITTEST_ONITEMRIGHT      = 0x0080;
    // on the label (string) associated with an item.
static const int wxTREE_HITTEST_ONITEMSTATEICON  = 0x0100;
    // on the left of the wxTreeCtrl.
static const int wxTREE_HITTEST_TOLEFT           = 0x0200;
    // on the right of the wxTreeCtrl.
static const int wxTREE_HITTEST_TORIGHT          = 0x0400;
    // on the upper part (first half) of the item.
static const int wxTREE_HITTEST_ONITEMUPPERPART  = 0x0800;
    // on the lower part (second half) of the item.
static const int wxTREE_HITTEST_ONITEMLOWERPART  = 0x1000;

    // anywhere on the item
static const int wxTREE_HITTEST_ONITEM  = wxTREE_HITTEST_ONITEMICON |
                                          wxTREE_HITTEST_ONITEMLABEL;


class wxFont
{
};
 
class wxColour
{
};

class wxStockGDI
{
public:
    enum Item {
        BRUSH_BLACK,
        BRUSH_BLUE,
        BRUSH_CYAN,
        BRUSH_GREEN,
        BRUSH_GREY,
        BRUSH_LIGHTGREY,
        BRUSH_MEDIUMGREY,
        BRUSH_RED,
        BRUSH_TRANSPARENT,
        BRUSH_WHITE,
        COLOUR_BLACK,
        COLOUR_BLUE,
        COLOUR_CYAN,
        COLOUR_GREEN,
        COLOUR_LIGHTGREY,
        COLOUR_RED,
        COLOUR_WHITE,
        CURSOR_CROSS,
        CURSOR_HOURGLASS,
        CURSOR_STANDARD,
        FONT_ITALIC,
        FONT_NORMAL,
        FONT_SMALL,
        FONT_SWISS,
        PEN_BLACK,
        PEN_BLACKDASHED,
        PEN_CYAN,
        PEN_GREEN,
        PEN_GREY,
        PEN_LIGHTGREY,
        PEN_MEDIUMGREY,
        PEN_RED,
        PEN_TRANSPARENT,
        PEN_WHITE,
        ITEMCOUNT
    };

    static wxStockGDI& instance() { return *ms_instance; }
    const wxFont* GetFont(Item item);
    const wxColour* GetColour(Item item);  
};

%{
extern const wxFont* GetItalicFont();
extern const wxFont* GetNormalFont();
extern const wxFont* GetSmallFont();
extern const wxFont* GetSwissFont();

extern const wxColour* GetBlack();
extern const wxColour* GetBlue();
extern const wxColour* GetCyan();
extern const wxColour* GetGreen();
extern const wxColour* GetLightGrey();
extern const wxColour* GetRed();
extern const wxColour* GetWhite();
%}

extern const wxFont* GetItalicFont();
extern const wxFont* GetNormalFont();
extern const wxFont* GetSmallFont();
extern const wxFont* GetSwissFont();
extern const wxColour* GetBlack();
extern const wxColour* GetBlue();
extern const wxColour* GetCyan();
extern const wxColour* GetGreen();
extern const wxColour* GetLightGrey();
extern const wxColour* GetRed();
extern const wxColour* GetWhite();

typedef void* wxTreeItemIdValue;

class wxTreeCtrl : public wxWindow
{
public:
    wxTreeCtrl(wxWindow *parent, wxWindowID id = wxID_ANY,
               const wxPoint& pos = wxDefaultPosition,
               const wxSize& size = wxDefaultSize,
               int style = wxTR_HAS_BUTTONS | wxTR_LINES_AT_ROOT,
               const wxValidator& validator = wxDefaultValidator,
               const wxString& name = wxTreeCtrlNameStr);
   virtual ~wxTreeCtrl();
               
   virtual wxTreeItemId AddRoot(const wxString& text,
		 int image = -1, int selImage = -1,
		 wxTreeItemData *data = NULL);
		 
    
                            
    wxTreeItemId GetRootItem() const;

    wxTreeItemId GetSelection() const;
    
    int GetItemImage(const wxTreeItemId& item,
                     wxTreeItemIcon which = wxTreeItemIcon_Normal) const;
    
    void SetItemImage(const wxTreeItemId& item,
                      int image,
                      wxTreeItemIcon which = wxTreeItemIcon_Normal);

    size_t GetChildrenCount(const wxTreeItemId& item,
	    bool recursively ) const;

	 void SetItemBold(const wxTreeItemId& item, bool bold);
	         
     wxString GetItemText(const wxTreeItemId& item) const;
     
     void SortChildren(const wxTreeItemId& item);
     
     // implement this one to change comparison used in SortChildren
     virtual int OnCompareItems(const wxTreeItemId& item1,
                               const wxTreeItemId& item2);
 
     bool ItemHasChildren(const wxTreeItemId& item) const;
     
     wxTreeItemId GetItemParent(const wxTreeItemId& item) const;
     
     wxFont GetItemFont(const wxTreeItemId& item) const;

     void SetItemFont( const wxTreeItemId& item, const wxFont& font );

     void SetItemDropHighlight(const wxTreeItemId& item,
                                      bool highlight = true);

     void SetItemTextColour(const wxTreeItemId& item,
                                   const wxColour& col);

     void SetItemBackgroundColour(const wxTreeItemId& item,
                                         const wxColour& col);
     
     wxTreeItemId GetFirstChild(const wxTreeItemId& item,
         wxTreeItemIdValue& cookie) const;
         
     wxTreeItemId GetNextChild(const wxTreeItemId& item,
         wxTreeItemIdValue& cookie) const;

     wxTreeItemId GetNextSibling(const wxTreeItemId& item) const;
        // get the previous sibling
     wxTreeItemId GetPrevSibling(const wxTreeItemId& item) const;

};

%feature("director") ESink;

%feature("director") wxTreeItemData;

class wxTreeItemData
{
public:
    wxTreeItemData();
    virtual ~wxTreeItemData();
};


// wx logging
extern void wxLogMessage(const char *szFormat);

%feature("director") ESink;
%feature("director") wxTreeCtrlCb;

class ESink : public wxObject {
public:
	ESink()
	:someNr(42)
	{}
	virtual ~ESink();
	void Thunk( wxEvent& event );
	virtual void GoEvent( wxEvent& event ) {}
	int someNr;
};

class wxGoApp : public wxApp {
public:
    wxGoApp();
    ~wxGoApp();
    virtual int MainLoop();
};

class wxTreeCtrlCb;

class wxGoTreeCtrl : public wxTreeCtrl {
public:
    wxGoTreeCtrl(wxWindow *parent, wxWindowID id = wxID_ANY,
               const wxPoint& pos = wxDefaultPosition,
               const wxSize& size = wxDefaultSize,
               int style = wxTR_HAS_BUTTONS | wxTR_LINES_AT_ROOT,
               const wxValidator& validator = wxDefaultValidator,
               const wxString& name = wxTreeCtrlNameStr);
    
    virtual int OnCompareItems(const wxTreeItemId& item1,
                   const wxTreeItemId& item2);
    void SetCb( wxTreeCtrlCb* pCb ) { mpCb = pCb; }
    
    %extend{
		wxTextCtrl* EditLabel(const wxTreeItemId& item) {
		    return self->EditLabel( item );
		}
		wxTextCtrl* EditLabelFull(const wxTreeItemId& item, wxClassInfo* textCtrlClass) {
		    return self->EditLabel( item, textCtrlClass );
		}
     }

        %extend {
        wxTreeItemId PrependItemFull(const wxTreeItemId& parent,
                             const wxString& text,
                             int image, int selImage,
                             wxTreeItemData *data)
        {
        	return self->PrependItem( parent, text, image, selImage, data );
        }
    }
    
    %extend {
        wxTreeItemId InsertItemFull(const wxTreeItemId& parent,
                            size_t pos,
                            const wxString& text,
                            int image, int selImage,
                            wxTreeItemData *data )
        {
        	self->InsertItem( parent, pos, text, image, selImage, data );
        }
    }
                            
    %extend {
        wxTreeItemId InsertItem( const wxTreeItemId& parent,
        size_t pos,
        const wxString& text )
        {
            return self->InsertItem( parent, pos, text, -1, -1, NULL );
        }
    }

        %extend {
        wxTreeItemId AppendItem( const wxTreeItemId& parent,
	    const wxString& text )
	{
	    return self->AppendItem( parent, text, -1 , -1, NULL );
	}
	wxTreeItemId AppendItemFull( const wxTreeItemId& parent,
	    const wxString& text,
	    int image, int selImage,
	    wxTreeItemData *data )
	{
	    return self->AppendItem( parent, text, image, selImage, data );
	}
    }
	    
    %extend {
        wxTreeItemId PrependItem( const wxTreeItemId& parent,
                             const wxString& text )
        {
            return self->PrependItem( parent, text, -1, -1, NULL );
        }
    }

private:
    wxTreeCtrlCb* mpCb;
};

class wxTreeCtrlCb 
{
public:
    virtual ~wxTreeCtrlCb();
    virtual int OnCompareItems( 
        const wxGoTreeCtrl& rTree,
        const wxTreeItemId& item1,
        const wxTreeItemId& item2 ){ return -1;};
};

extern const wxPoint wxDefaultPosition;
extern const wxSize wxDefaultSize;

const unsigned int wxNO_FULL_REPAINT_ON_RESIZE=0;
const unsigned int wxHSCROLL=0x40000000;
const unsigned int wxVSCROLL=0x80000000;

class wxScrolledWindow : public wxPanel
{
public:
    wxScrolledWindow(wxWindow* parent,
    	wxWindowID winid,
    	wxPoint pos,
    	wxSize size,
    	unsigned int style);
	virtual ~wxScrolledWindow();
	void SetScrollbars(int pixelsPerUnitX, int pixelsPerUnitY,
                               int noUnitsX, int noUnitsY );
};

typedef int wxCoord;

class wxPaintDC
{
public:
    wxPaintDC(wxWindow *win);
    virtual ~wxPaintDC();
    void Clear();
	void DrawLine(wxCoord x1, wxCoord y1, wxCoord x2, wxCoord y2);
	void DrawText(const wxString& text, wxCoord x, wxCoord y);
};

